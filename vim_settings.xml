<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" timestamp="1531980842089">
        <mark key="'" line="34" column="0" />
        <mark key="[" line="34" column="0" />
        <mark key="]" line="34" column="0" />
        <mark key="^" line="159" column="67" />
        <mark key="." line="34" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/node_modules/eslint-config-cbtnuggets/rules/node-es6.js" timestamp="1511290384929">
        <mark key="[" line="38" column="31" />
        <mark key="]" line="38" column="32" />
        <mark key="^" line="33" column="30" />
        <mark key="." line="38" column="32" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-leaderboard-reducer/node/config/qa.js" timestamp="1516987818332">
        <mark key="[" line="11" column="10" />
        <mark key="]" line="11" column="11" />
        <mark key="." line="11" column="11" />
        <mark key="^" line="11" column="11" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/lib/index" timestamp="1531934426332">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-member/node/test/base.js" timestamp="1525991176745">
        <mark key="[" line="70" column="26" />
        <mark key="]" line="70" column="26" />
        <mark key="^" line="70" column="19" />
        <mark key="." line="70" column="26" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/models/dynamodb/token.js" timestamp="1526511896482">
        <mark key="'" line="37" column="74" />
        <mark key="[" line="14" column="44" />
        <mark key="]" line="14" column="45" />
        <mark key="^" line="14" column="44" />
        <mark key="." line="14" column="45" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/webstorm.vmoptions" timestamp="1516040730814">
        <mark key="'" line="3" column="1" />
        <mark key="[" line="3" column="4" />
        <mark key="]" line="3" column="7" />
        <mark key="." line="3" column="7" />
        <mark key="^" line="3" column="7" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/token.js" timestamp="1513360662616">
        <mark key="[" line="12" column="21" />
        <mark key="]" line="12" column="27" />
        <mark key="." line="12" column="27" />
        <mark key="^" line="12" column="27" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/actions/index.js" timestamp="1528930870965">
        <mark key="'" line="46" column="22" />
        <mark key="[" line="33" column="22" />
        <mark key="]" line="33" column="22" />
        <mark key="." line="33" column="22" />
        <mark key="^" line="33" column="22" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/4lambda_test.js" timestamp="1515188966984">
        <mark key="[" line="9" column="26" />
        <mark key="]" line="9" column="27" />
        <mark key="^" line="9" column="27" />
        <mark key="." line="9" column="27" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/routes.js" timestamp="1525124262117">
        <mark key="'" line="79" column="19" />
        <mark key="[" line="25" column="29" />
        <mark key="]" line="25" column="29" />
        <mark key="." line="25" column="29" />
        <mark key="^" line="25" column="28" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/components/LoginForm.js" timestamp="1528325309230">
        <mark key="'" line="58" column="39" />
        <mark key="[" line="41" column="8" />
        <mark key="]" line="41" column="8" />
        <mark key="." line="41" column="8" />
        <mark key="^" line="41" column="8" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-auth-models-mongodb-nodejs/models/user.js" timestamp="1513196668171">
        <mark key="[" line="505" column="42" />
        <mark key="]" line="506" column="15" />
        <mark key="^" line="506" column="15" />
        <mark key="." line="506" column="15" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/test/api/promotion.js" timestamp="1517429644727">
        <mark key="'" line="666" column="0" />
        <mark key="[" line="598" column="58" />
        <mark key="]" line="598" column="58" />
        <mark key="." line="598" column="58" />
        <mark key="^" line="598" column="58" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/.gitignore" timestamp="1517349941729">
        <mark key="[" line="29" column="7" />
        <mark key="]" line="30" column="12" />
        <mark key="^" line="30" column="12" />
        <mark key="." line="30" column="12" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/vqs_videocollectionsGet" timestamp="1518762569940">
        <mark key="'" line="24" column="23" />
        <mark key="[" line="83" column="30" />
        <mark key="]" line="83" column="30" />
        <mark key="^" line="16" column="316" />
        <mark key="." line="83" column="30" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/templates/index.js" timestamp="1526406754647">
        <mark key="[" line="12" column="43" />
        <mark key="]" line="12" column="43" />
        <mark key="^" line="5" column="35" />
        <mark key="." line="12" column="43" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/test/lambda_test.js" timestamp="1523987010964">
        <mark key="[" line="54" column="0" />
        <mark key="]" line="54" column="0" />
        <mark key="." line="54" column="0" />
        <mark key="^" line="54" column="18" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/lib/firehose.js" timestamp="1524776121853">
        <mark key="'" line="4" column="0" />
        <mark key="[" line="58" column="5" />
        <mark key="]" line="58" column="5" />
        <mark key="^" line="58" column="5" />
        <mark key="." line="58" column="5" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/publish_email.js" timestamp="1510352930273">
        <mark key="[" line="194" column="12" />
        <mark key="]" line="194" column="16" />
        <mark key="^" line="194" column="16" />
        <mark key="." line="194" column="16" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/actions/types.js" timestamp="1528930090594">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="6" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/.eslintrc" timestamp="1527748059404">
        <mark key="[" line="1" column="40" />
        <mark key="]" line="1" column="38" />
        <mark key="." line="1" column="38" />
        <mark key="^" line="1" column="38" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-leaderboard-reducer/node/app.js" timestamp="1516922369504">
        <mark key="[" line="255" column="34" />
        <mark key="]" line="255" column="34" />
        <mark key="^" line="255" column="34" />
        <mark key="." line="255" column="34" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/api/schedule_enable.js" timestamp="1526079669568">
        <mark key="[" line="167" column="39" />
        <mark key="]" line="167" column="44" />
        <mark key="." line="167" column="44" />
        <mark key="^" line="167" column="44" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/actions/index.js" timestamp="1527705502420">
        <mark key="[" line="2" column="50" />
        <mark key="]" line="3" column="3" />
        <mark key="^" line="3" column="3" />
        <mark key="." line="3" column="3" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-notification-schedule-service-client-nodejs/api.js" timestamp="1519066753345">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="4" column="0" />
        <mark key="^" line="17" column="8" />
        <mark key="." line="4" column="0" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-app-core-nodejs/test/config_test.js" timestamp="1530649940773">
        <mark key="'" line="10" column="20" />
        <mark key="[" line="89" column="0" />
        <mark key="]" line="89" column="65" />
        <mark key="^" line="86" column="14" />
        <mark key="." line="89" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/authentication/logout.js" timestamp="1525730369743">
        <mark key="'" line="52" column="0" />
        <mark key="[" line="72" column="7" />
        <mark key="]" line="73" column="3" />
        <mark key="^" line="73" column="3" />
        <mark key="." line="73" column="3" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/reducers/index.js" timestamp="1527705545917">
        <mark key="[" line="6" column="82" />
        <mark key="]" line="6" column="84" />
        <mark key="^" line="6" column="84" />
        <mark key="." line="6" column="84" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/lib/tokens.js" timestamp="1531869054665">
        <mark key="'" line="46" column="7" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="7" column="17" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz/node/test/mocha.opts" timestamp="1509038075454">
        <mark key="[" line="4" column="15" />
        <mark key="]" line="4" column="15" />
        <mark key="^" line="4" column="15" />
        <mark key="." line="4" column="15" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz/node/test/fixtures/questions.js" timestamp="1509041614258">
        <mark key="[" line="417" column="40" />
        <mark key="]" line="481" column="4" />
        <mark key="^" line="481" column="4" />
        <mark key="." line="481" column="4" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz-report/node/.nvmrc" timestamp="1505331316202">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="4" />
        <mark key="." line="0" column="4" />
        <mark key="^" line="0" column="4" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/authentication/token_refresh.js" timestamp="1525122777910">
        <mark key="'" line="211" column="0" />
        <mark key="[" line="233" column="0" />
        <mark key="]" line="233" column="69" />
        <mark key="^" line="92" column="72" />
        <mark key="." line="233" column="0" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-report-delivery-service-client-nodejs/lib/index.js" timestamp="1510338023858">
        <mark key="[" line="6" column="46" />
        <mark key="]" line="6" column="51" />
        <mark key="." line="6" column="51" />
        <mark key="^" line="6" column="51" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/test/fixtures/fake_exam_provider_response.js" timestamp="1531348301373">
        <mark key="'" line="39" column="1" />
        <mark key="[" line="18" column="17" />
        <mark key="]" line="32" column="16" />
        <mark key="^" line="32" column="16" />
        <mark key="." line="32" column="16" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/authentication/email_auth.js" timestamp="1525727289152">
        <mark key="'" line="209" column="70" />
        <mark key="[" line="585" column="0" />
        <mark key="]" line="585" column="125" />
        <mark key="^" line="558" column="85" />
        <mark key="." line="585" column="0" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/deploy.sh" timestamp="1531896468332">
        <mark key="[" line="41" column="0" />
        <mark key="]" line="41" column="0" />
        <mark key="." line="41" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/dev/update-courses-with-existing-exams.js" timestamp="1521824868652">
        <mark key="[" line="138" column="104" />
        <mark key="]" line="138" column="102" />
        <mark key="." line="138" column="102" />
        <mark key="^" line="138" column="102" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-notification-schedule-service-client-nodejs/build/build.sh" timestamp="1519066125149">
        <mark key="[" line="15" column="2" />
        <mark key="]" line="15" column="4" />
        <mark key="." line="15" column="4" />
        <mark key="^" line="15" column="4" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/templates/components/Editor/index.js" timestamp="1525804648980">
        <mark key="'" line="25" column="0" />
        <mark key="[" line="20" column="4" />
        <mark key="]" line="20" column="15" />
        <mark key="." line="20" column="15" />
        <mark key="^" line="20" column="15" />
      </file>
      <file name="$USER_HOME$/src/services/service-leaderboard/node/lib/auth_middleware.js" timestamp="1507852391460">
        <mark key="[" line="29" column="0" />
        <mark key="]" line="29" column="23" />
        <mark key="." line="29" column="0" />
        <mark key="^" line="26" column="59" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/__tests__/LoginForm.test.js" timestamp="1527750595715">
        <mark key="[" line="6" column="42" />
        <mark key="]" line="6" column="51" />
        <mark key="." line="6" column="51" />
        <mark key="^" line="6" column="51" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/test/api/catalog_test.js" timestamp="1522193587649">
        <mark key="[" line="678" column="6" />
        <mark key="]" line="678" column="6" />
        <mark key="." line="678" column="6" />
        <mark key="^" line="678" column="6" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/keys.json" timestamp="1525503025076">
        <mark key="[" line="35" column="0" />
        <mark key="]" line="35" column="1" />
        <mark key="." line="35" column="0" />
        <mark key="^" line="30" column="11" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/.eslintignore" timestamp="1518729972160">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="^" line="1" column="4" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-feature-flag/node/test/api/delete_flags.js" timestamp="1507929279179">
        <mark key="[" line="16" column="6" />
        <mark key="]" line="16" column="6" />
        <mark key="." line="16" column="6" />
        <mark key="^" line="22" column="59" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/metadata.yaml" timestamp="1526517860490">
        <mark key="[" line="3" column="20" />
        <mark key="]" line="3" column="20" />
        <mark key="." line="3" column="20" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/api/schedules.js" timestamp="1525892011821">
        <mark key="[" line="95" column="6" />
        <mark key="]" line="95" column="6" />
        <mark key="^" line="95" column="10" />
        <mark key="." line="95" column="6" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/react-native-music/components/SoundButton" timestamp="1515448277773">
        <mark key="[" line="20" column="26" />
        <mark key="]" line="20" column="26" />
        <mark key="^" line="20" column="26" />
        <mark key="." line="20" column="26" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/.gitignore" timestamp="1520287755636">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="4" />
        <mark key="^" line="0" column="4" />
        <mark key="." line="0" column="4" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests-app/__tests__/.eslintrc" timestamp="1527746951027">
        <mark key="[" line="5" column="9" />
        <mark key="]" line="5" column="15" />
        <mark key="." line="5" column="15" />
        <mark key="^" line="5" column="15" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/components/index.js" timestamp="1527185315755">
        <mark key="[" line="5" column="29" />
        <mark key="]" line="5" column="29" />
        <mark key="." line="5" column="29" />
        <mark key="^" line="5" column="29" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/auth.js" timestamp="1511224662779">
        <mark key="[" line="15" column="39" />
        <mark key="]" line="15" column="40" />
        <mark key="." line="15" column="40" />
        <mark key="^" line="15" column="40" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/.eslintignore" timestamp="1505496493511">
        <mark key="[" line="3" column="0" />
        <mark key="]" line="3" column="0" />
        <mark key="^" line="3" column="5" />
        <mark key="." line="3" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/todos.js" timestamp="1524780827370">
        <mark key="'" line="68" column="0" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="14" />
        <mark key="." line="2" column="14" />
        <mark key="^" line="2" column="14" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/api/schedule_disable.js" timestamp="1526322477126">
        <mark key="[" line="29" column="22" />
        <mark key="]" line="29" column="23" />
        <mark key="." line="29" column="23" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/screens/SignIn.js" timestamp="1529045335039">
        <mark key="[" line="8" column="95" />
        <mark key="]" line="8" column="18" />
        <mark key="." line="8" column="18" />
        <mark key="^" line="8" column="18" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/tokens/token.js" timestamp="1526052949393">
        <mark key="[" line="169" column="63" />
        <mark key="]" line="173" column="0" />
        <mark key="." line="173" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/errors/index.js" timestamp="1511291773443">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="5" column="0" />
        <mark key="." line="5" column="0" />
        <mark key="^" line="5" column="35" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/routes/view.js" timestamp="1524518699230">
        <mark key="'" line="68" column="47" />
        <mark key="[" line="26" column="17" />
        <mark key="]" line="26" column="24" />
        <mark key="." line="26" column="24" />
        <mark key="^" line="26" column="24" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/config/default.js" timestamp="1531897133922">
        <mark key="[" line="11" column="51" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/lib/errors/firehose_error.js" timestamp="1524776113467">
        <mark key="'" line="18" column="0" />
        <mark key="[" line="19" column="31" />
        <mark key="]" line="19" column="31" />
        <mark key="." line="19" column="31" />
        <mark key="^" line="19" column="31" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/test.json" timestamp="1526324744051">
        <mark key="[" line="37" column="20" />
        <mark key="]" line="37" column="23" />
        <mark key="." line="37" column="23" />
        <mark key="^" line="37" column="23" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/config/test.js" timestamp="1523985886019">
        <mark key="'" line="21" column="0" />
        <mark key="[" line="7" column="8" />
        <mark key="]" line="7" column="16" />
        <mark key="." line="7" column="16" />
        <mark key="^" line="7" column="16" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz/node/routes/api.js" timestamp="1513966290977">
        <mark key="'" line="1012" column="26" />
        <mark key="[" line="954" column="103" />
        <mark key="]" line="954" column="119" />
        <mark key="^" line="954" column="119" />
        <mark key="." line="954" column="119" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/lib/todo_handler.js" timestamp="1526529904482">
        <mark key="'" line="50" column="79" />
        <mark key="[" line="91" column="42" />
        <mark key="]" line="91" column="46" />
        <mark key="." line="91" column="46" />
        <mark key="^" line="91" column="46" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-report-delivery-service-client-nodejs/test/api/index.js" timestamp="1510337970577">
        <mark key="[" line="40" column="60" />
        <mark key="]" line="40" column="78" />
        <mark key="^" line="41" column="56" />
        <mark key="." line="40" column="60" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-leaderboard-reducer/node/package.json" timestamp="1516991194246">
        <mark key="[" line="18" column="16" />
        <mark key="]" line="18" column="23" />
        <mark key="." line="18" column="23" />
        <mark key="^" line="18" column="23" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-notification-schedule-service-client-nodejs/client.js" timestamp="1519066337377">
        <mark key="'" line="21" column="1" />
        <mark key="[" line="13" column="26" />
        <mark key="]" line="13" column="46" />
        <mark key="." line="13" column="46" />
        <mark key="^" line="13" column="46" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-notification-service-client-nodejs/.nvmrc" timestamp="1524161793766">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="4" />
        <mark key="^" line="0" column="4" />
        <mark key="." line="0" column="4" />
      </file>
      <file name="$USER_HOME$/src/command-line-interfaces/cli-cbt/commands/auth/get_token_for_email.js" timestamp="1512759351235">
        <mark key="'" line="214" column="8" />
        <mark key="[" line="220" column="0" />
        <mark key="]" line="220" column="58" />
        <mark key="." line="220" column="0" />
        <mark key="^" line="216" column="35" />
      </file>
      <file name="$USER_HOME$/src/services/service-leaderboard/node/node_modules/lib-leaderboard-models-mongodb-nodejs/models/score.js" timestamp="1507320515006">
        <mark key="[" line="61" column="0" />
        <mark key="]" line="61" column="0" />
        <mark key="." line="61" column="0" />
        <mark key="^" line="61" column="50" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/mocha.opts" timestamp="1515182257661">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="13" />
        <mark key="^" line="0" column="13" />
        <mark key="." line="0" column="13" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/models/dynamodb/session.js" timestamp="1521563498645">
        <mark key="[" line="107" column="0" />
        <mark key="]" line="107" column="0" />
        <mark key="^" line="112" column="45" />
        <mark key="." line="107" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/test/common.js" timestamp="1512595032585">
        <mark key="'" line="102" column="52" />
        <mark key="[" line="110" column="26" />
        <mark key="]" line="110" column="26" />
        <mark key="." line="110" column="26" />
        <mark key="^" line="109" column="36" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/metadata.config" timestamp="1522344015367">
        <mark key="[" line="4" column="6" />
        <mark key="]" line="4" column="5" />
        <mark key="." line="4" column="5" />
        <mark key="^" line="4" column="5" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests-app/src/reducers/index.js" timestamp="1527746050181">
        <mark key="[" line="3" column="4" />
        <mark key="]" line="3" column="9" />
        <mark key="^" line="3" column="9" />
        <mark key="." line="3" column="9" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/config/keys.json" timestamp="1531945882984">
        <mark key="[" line="21" column="26" />
        <mark key="]" line="21" column="26" />
        <mark key="." line="21" column="26" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/react-native-music/.nvmrc" timestamp="1515197118447">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="3" />
        <mark key="^" line="0" column="3" />
        <mark key="." line="0" column="3" />
      </file>
      <file name="$USER_HOME$/src/services/service-member/node/config/test.json" timestamp="1525991091714">
        <mark key="[" line="58" column="66" />
        <mark key="]" line="58" column="66" />
        <mark key="^" line="58" column="64" />
        <mark key="." line="58" column="66" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/routes/api_exams.js" timestamp="1531974570349">
        <mark key="[" line="20" column="0" />
        <mark key="]" line="20" column="0" />
        <mark key="." line="20" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/static/js/site.js" timestamp="1525122156343">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="31" column="4" />
        <mark key="]" line="31" column="0" />
        <mark key="." line="31" column="0" />
        <mark key="^" line="31" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests-app/__tests__/App.test.js" timestamp="1527747755333">
        <mark key="[" line="9" column="0" />
        <mark key="]" line="9" column="0" />
        <mark key="." line="9" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-leaderboard/node/lib/rebuild.js" timestamp="1507320674244">
        <mark key="[" line="7" column="21" />
        <mark key="]" line="7" column="25" />
        <mark key="." line="7" column="25" />
        <mark key="^" line="7" column="25" />
      </file>
      <file name="$USER_HOME$/src/services/service-member/node/test/api/userprefs_test.js" timestamp="1525991234213">
        <mark key="'" line="38" column="26" />
        <mark key="[" line="131" column="10" />
        <mark key="]" line="131" column="10" />
        <mark key="." line="131" column="10" />
        <mark key="^" line="132" column="15" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/lib/todoProcess.js" timestamp="1524785191921">
        <mark key="'" line="183" column="11" />
        <mark key="[" line="251" column="0" />
        <mark key="]" line="251" column="0" />
        <mark key="." line="251" column="0" />
        <mark key="^" line="252" column="35" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/.nvmrc" timestamp="1515020176033">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="4" />
        <mark key="." line="0" column="4" />
        <mark key="^" line="0" column="4" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/.eslintignore" timestamp="1527185488805">
        <mark key="[" line="0" column="9" />
        <mark key="]" line="0" column="11" />
        <mark key="^" line="0" column="11" />
        <mark key="." line="0" column="11" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-auth-export-user/node/lib/message_handler.js" timestamp="1517252550248">
        <mark key="'" line="48" column="19" />
        <mark key="[" line="9" column="0" />
        <mark key="]" line="9" column="0" />
        <mark key="." line="9" column="0" />
        <mark key="^" line="9" column="18" />
      </file>
      <file name="$USER_HOME$/src/command-line-interfaces/cli-cbt/config.json" timestamp="1510640261918">
        <mark key="'" line="127" column="5" />
        <mark key="[" line="128" column="76" />
        <mark key="]" line="128" column="76" />
        <mark key="^" line="128" column="71" />
        <mark key="." line="128" column="76" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/src/constants.js" timestamp="1530252524344">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/app.js" timestamp="1511298932825">
        <mark key="'" line="182" column="24" />
        <mark key="[" line="27" column="7" />
        <mark key="]" line="27" column="5" />
        <mark key="^" line="27" column="5" />
        <mark key="." line="27" column="5" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-license-cleanup/node/test/base.js" timestamp="1518470917628">
        <mark key="[" line="20" column="35" />
        <mark key="]" line="20" column="33" />
        <mark key="." line="20" column="33" />
        <mark key="^" line="20" column="33" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/models/dynamoToken.js" timestamp="1515690437533">
        <mark key="'" line="7" column="5" />
        <mark key="[" line="4" column="34" />
        <mark key="]" line="5" column="40" />
        <mark key="^" line="5" column="40" />
        <mark key="." line="5" column="40" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/.eslintignore" timestamp="1520283273735">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="10" />
        <mark key="^" line="0" column="10" />
        <mark key="." line="0" column="10" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/middleware/feature_flags.js" timestamp="1525207736742">
        <mark key="[" line="4" column="35" />
        <mark key="]" line="4" column="47" />
        <mark key="^" line="4" column="47" />
        <mark key="." line="4" column="47" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/README.md" timestamp="1525718965975">
        <mark key="'" line="89" column="75" />
        <mark key="[" line="431" column="0" />
        <mark key="]" line="431" column="2" />
        <mark key="." line="431" column="2" />
        <mark key="^" line="431" column="2" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/.eslintrc" timestamp="1531868810401">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="8" column="0" />
        <mark key="^" line="7" column="59" />
        <mark key="." line="8" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz-report/node/config/routes.js" timestamp="1505419692212">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="^" line="4" column="45" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/App.js" timestamp="1527226905324">
        <mark key="[" line="12" column="21" />
        <mark key="]" line="12" column="36" />
        <mark key="." line="12" column="36" />
        <mark key="^" line="12" column="36" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/fixtures/token_fixtures.js" timestamp="1525373353544">
        <mark key="'" line="251" column="27" />
        <mark key="[" line="283" column="37" />
        <mark key="]" line="283" column="38" />
        <mark key="." line="283" column="38" />
        <mark key="^" line="283" column="38" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" timestamp="1531932901031">
        <mark key="'" line="139" column="21" />
        <mark key="[" line="7" column="36" />
        <mark key="]" line="7" column="30" />
        <mark key="." line="7" column="30" />
        <mark key="^" line="7" column="30" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/common.js" timestamp="1526546879817">
        <mark key="'" line="68" column="12" />
        <mark key="[" line="231" column="52" />
        <mark key="]" line="231" column="53" />
        <mark key="^" line="231" column="52" />
        <mark key="." line="231" column="53" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/templates/views/Main/index.js" timestamp="1525805077842">
        <mark key="[" line="13" column="45" />
        <mark key="]" line="13" column="50" />
        <mark key="." line="13" column="50" />
        <mark key="^" line="13" column="50" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-report-delivery-service-client-nodejs/.eslintrc" timestamp="1510269022888">
        <mark key="[" line="8" column="26" />
        <mark key="]" line="8" column="27" />
        <mark key="^" line="8" column="24" />
        <mark key="." line="8" column="27" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/react-native-music/App.js" timestamp="1515561170592">
        <mark key="[" line="11" column="37" />
        <mark key="]" line="11" column="43" />
        <mark key="^" line="11" column="43" />
        <mark key="." line="11" column="43" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/templates/views/Emails/index.js" timestamp="1526406518999">
        <mark key="[" line="55" column="28" />
        <mark key="]" line="55" column="26" />
        <mark key="." line="55" column="26" />
        <mark key="^" line="55" column="26" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/test/base.js" timestamp="1510097216111">
        <mark key="[" line="187" column="141" />
        <mark key="]" line="187" column="141" />
        <mark key="." line="187" column="141" />
        <mark key="^" line="187" column="141" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/util/token_utils.js" timestamp="1525387228954">
        <mark key="'" line="2" column="0" />
        <mark key="[" line="60" column="22" />
        <mark key="]" line="60" column="32" />
        <mark key="." line="60" column="32" />
        <mark key="^" line="60" column="32" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/screens/SignUp.js" timestamp="1528931373005">
        <mark key="[" line="10" column="23" />
        <mark key="]" line="10" column="26" />
        <mark key="^" line="10" column="26" />
        <mark key="." line="10" column="26" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/keys.json" timestamp="1526332954440">
        <mark key="[" line="12" column="0" />
        <mark key="]" line="12" column="0" />
        <mark key="." line="12" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/config/prod.json" timestamp="1517266506222">
        <mark key="[" line="32" column="0" />
        <mark key="]" line="32" column="0" />
        <mark key="^" line="31" column="3" />
        <mark key="." line="32" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/node_modules/lib-app-core-nodejs/lib/config.js" timestamp="1530915552014">
        <mark key="'" line="232" column="12" />
        <mark key="[" line="220" column="58" />
        <mark key="]" line="221" column="26" />
        <mark key="^" line="221" column="26" />
        <mark key="." line="221" column="26" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/data/v1_animals.json" timestamp="1515536691661">
        <mark key="[" line="39" column="0" />
        <mark key="]" line="39" column="86" />
        <mark key="^" line="7" column="17" />
        <mark key="." line="39" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/config/firebase_keys.js" timestamp="1527751722638">
        <mark key="[" line="8" column="19" />
        <mark key="]" line="8" column="19" />
        <mark key="." line="8" column="19" />
        <mark key="^" line="8" column="19" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/config/qa.js" timestamp="1531886954082">
        <mark key="[" line="25" column="29" />
        <mark key="]" line="25" column="31" />
        <mark key="." line="25" column="31" />
        <mark key="^" line="25" column="31" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/authentication/index.js" timestamp="1525126101546">
        <mark key="[" line="7" column="32" />
        <mark key="]" line="7" column="32" />
        <mark key="." line="7" column="32" />
        <mark key="^" line="7" column="32" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/lib/index.js" timestamp="1531871709570">
        <mark key="[" line="13" column="35" />
        <mark key="]" line="14" column="40" />
        <mark key="." line="14" column="40" />
        <mark key="^" line="14" column="40" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-leaderboard-reducer/node/config/keys.json" timestamp="1516922169926">
        <mark key="'" line="58" column="1" />
        <mark key="[" line="53" column="30" />
        <mark key="]" line="53" column="30" />
        <mark key="^" line="54" column="33" />
        <mark key="." line="53" column="30" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-notification-schedule-service-client-nodejs/package.json" timestamp="1519065830694">
        <mark key="'" line="17" column="20" />
        <mark key="[" line="26" column="38" />
        <mark key="]" line="26" column="39" />
        <mark key="." line="26" column="39" />
        <mark key="^" line="3" column="40" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/templates/sidebar.js" timestamp="1525800526408">
        <mark key="[" line="5" column="16" />
        <mark key="]" line="5" column="16" />
        <mark key="^" line="5" column="16" />
        <mark key="." line="5" column="16" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/internal_users_by_ids.js" timestamp="1519422000873">
        <mark key="[" line="9" column="16" />
        <mark key="]" line="9" column="16" />
        <mark key="." line="9" column="24" />
        <mark key="^" line="7" column="27" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/node/app.js" timestamp="1526429556112">
        <mark key="[" line="139" column="106" />
        <mark key="]" line="139" column="102" />
        <mark key="." line="139" column="102" />
        <mark key="^" line="139" column="102" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/__tests__/.eslintrc" timestamp="1527183789149">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1" column="20" />
        <mark key="^" line="1" column="20" />
        <mark key="." line="1" column="20" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/config/routes.js" timestamp="1531339039037">
        <mark key="'" line="26" column="29" />
        <mark key="[" line="8" column="48" />
        <mark key="]" line="8" column="55" />
        <mark key="." line="8" column="55" />
        <mark key="^" line="8" column="55" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-app-core-nodejs/dev/index.js" timestamp="1530811429471">
        <mark key="[" line="17" column="53" />
        <mark key="]" line="17" column="64" />
        <mark key="^" line="17" column="64" />
        <mark key="." line="17" column="64" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/config/qa.json" timestamp="1531946707427">
        <mark key="[" line="39" column="31" />
        <mark key="]" line="39" column="31" />
        <mark key="." line="39" column="31" />
        <mark key="^" line="39" column="30" />
      </file>
      <file name="$USER_HOME$/src/command-line-interfaces/cli-cbt/commands/ff/get_ff.js" timestamp="1510640309167">
        <mark key="[" line="25" column="0" />
        <mark key="]" line="25" column="68" />
        <mark key="." line="15" column="12" />
        <mark key="^" line="15" column="12" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/qa.json" timestamp="1526056141528">
        <mark key="[" line="28" column="66" />
        <mark key="]" line="28" column="64" />
        <mark key="^" line="28" column="64" />
        <mark key="." line="28" column="64" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-app-core-nodejs/lib/config.js" timestamp="1530807054472">
        <mark key="'" line="445" column="29" />
        <mark key="[" line="237" column="0" />
        <mark key="]" line="242" column="0" />
        <mark key="." line="255" column="17" />
        <mark key="^" line="255" column="17" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/firehose_expected_values.js" timestamp="1524776103327">
        <mark key="'" line="38" column="2" />
        <mark key="[" line="0" column="52" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
        <mark key="^" line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/reducers/AuthReducer.js" timestamp="1528930130695">
        <mark key="[" line="28" column="0" />
        <mark key="]" line="28" column="0" />
        <mark key="." line="28" column="0" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/fixtures/remove.js" timestamp="1515091189948">
        <mark key="'" line="61" column="0" />
        <mark key="[" line="57" column="8" />
        <mark key="]" line="57" column="18" />
        <mark key="." line="57" column="18" />
        <mark key="^" line="57" column="18" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/package.json" timestamp="1531896808738">
        <mark key="[" line="18" column="19" />
        <mark key="]" line="19" column="33" />
        <mark key="^" line="19" column="33" />
        <mark key="." line="19" column="33" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/templates/breadcrumbs.js" timestamp="1526405490578">
        <mark key="[" line="1" column="42" />
        <mark key="]" line="1" column="42" />
        <mark key="." line="1" column="42" />
        <mark key="^" line="1" column="42" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/lambda_test.js" timestamp="1515442222454">
        <mark key="'" line="59" column="40" />
        <mark key="[" line="161" column="55" />
        <mark key="]" line="161" column="55" />
        <mark key="^" line="161" column="55" />
        <mark key="." line="161" column="55" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/node/config/qa.js" timestamp="1525980207648">
        <mark key="[" line="13" column="51" />
        <mark key="]" line="13" column="52" />
        <mark key="." line="13" column="52" />
        <mark key="^" line="13" column="52" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/.eslintrc" timestamp="1519162729244">
        <mark key="[" line="6" column="19" />
        <mark key="]" line="6" column="22" />
        <mark key="." line="6" column="22" />
        <mark key="^" line="6" column="22" />
      </file>
      <file name="$USER_HOME$/src/command-line-interfaces/cli-cbt/lib/util.js" timestamp="1512756078615">
        <mark key="'" line="791" column="58" />
        <mark key="[" line="797" column="49" />
        <mark key="]" line="797" column="49" />
        <mark key="." line="797" column="49" />
        <mark key="^" line="797" column="49" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/routes/internal.js" timestamp="1526547277109">
        <mark key="'" line="40" column="8" />
        <mark key="[" line="30" column="33" />
        <mark key="]" line="30" column="43" />
        <mark key="^" line="30" column="43" />
        <mark key="." line="30" column="43" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests-app/App.js" timestamp="1527746106896">
        <mark key="'" line="28" column="0" />
        <mark key="[" line="9" column="41" />
        <mark key="]" line="9" column="48" />
        <mark key="^" line="9" column="48" />
        <mark key="." line="9" column="48" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/routes/index.js" timestamp="1510868739616">
        <mark key="'" line="46" column="5" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="." line="7" column="0" />
        <mark key="^" line="7" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/package.json" timestamp="1522097118905">
        <mark key="[" line="37" column="16" />
        <mark key="]" line="37" column="16" />
        <mark key="." line="37" column="16" />
        <mark key="^" line="37" column="19" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/src/screens/Home.js" timestamp="1530251881895">
        <mark key="'" line="2" column="0" />
        <mark key="[" line="34" column="17" />
        <mark key="]" line="34" column="32" />
        <mark key="." line="34" column="32" />
        <mark key="^" line="34" column="32" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/tokens/constants.js" timestamp="1525199390484">
        <mark key="'" line="29" column="4" />
        <mark key="[" line="27" column="18" />
        <mark key="]" line="27" column="23" />
        <mark key="^" line="27" column="23" />
        <mark key="." line="27" column="23" />
      </file>
      <file name="$USER_HOME$/src/services/service-feature-flag/node/lib/response.js" timestamp="1507927845047">
        <mark key="[" line="49" column="50" />
        <mark key="]" line="49" column="58" />
        <mark key="." line="49" column="58" />
        <mark key="^" line="49" column="58" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/src/actions/index.js" timestamp="1529912701170">
        <mark key="'" line="41" column="0" />
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="^" line="46" column="4" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/test/api/course_test.js" timestamp="1531349200868">
        <mark key="'" line="11" column="44" />
        <mark key="[" line="712" column="12" />
        <mark key="]" line="712" column="12" />
        <mark key="^" line="12" column="85" />
        <mark key="." line="712" column="12" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/lib/todo_factory.js" timestamp="1526540635124">
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="36" />
        <mark key="." line="27" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/components/actions/index.js" timestamp="1527227546544">
        <mark key="[" line="2" column="30" />
        <mark key="]" line="2" column="30" />
        <mark key="^" line="2" column="30" />
        <mark key="." line="2" column="30" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/routes/api.js" timestamp="1521563508470">
        <mark key="'" line="632" column="30" />
        <mark key="[" line="631" column="0" />
        <mark key="]" line="631" column="0" />
        <mark key="^" line="640" column="47" />
        <mark key="." line="631" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/routes/api.js" timestamp="1526416830028">
        <mark key="[" line="347" column="0" />
        <mark key="]" line="347" column="75" />
        <mark key="^" line="347" column="50" />
        <mark key="." line="347" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/__tests__/SignInForm.test.js" timestamp="1529910320063">
        <mark key="[" line="2" column="43" />
        <mark key="]" line="2" column="47" />
        <mark key="." line="2" column="47" />
        <mark key="^" line="2" column="47" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/password.js" timestamp="1510353067041">
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="^" line="37" column="27" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/test/api/membership.js" timestamp="1512513706418">
        <mark key="[" line="111" column="0" />
        <mark key="]" line="111" column="0" />
        <mark key="." line="111" column="0" />
        <mark key="^" line="111" column="39" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-leaderboard-models-mongodb-nodejs/models/score.js" timestamp="1517010857015">
        <mark key="'" line="833" column="47" />
        <mark key="[" line="562" column="54" />
        <mark key="]" line="562" column="54" />
        <mark key="^" line="562" column="54" />
        <mark key="." line="562" column="54" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/App.js" timestamp="1528929262970">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/mocks/token_mock.js" timestamp="1524588499043">
        <mark key="[" line="26" column="2" />
        <mark key="]" line="26" column="2" />
        <mark key="." line="26" column="2" />
        <mark key="^" line="26" column="2" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/test/api/exam_test.js" timestamp="1521239087317">
        <mark key="[" line="139" column="10" />
        <mark key="]" line="139" column="10" />
        <mark key="^" line="139" column="11" />
        <mark key="." line="139" column="10" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/fixtures/dynamo-event.json" timestamp="1515020828550">
        <mark key="'" line="28" column="30" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2" column="16" />
        <mark key="." line="2" column="16" />
        <mark key="^" line="2" column="16" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-notification-service-client-nodejs/api.js" timestamp="1524180036237">
        <mark key="'" line="32" column="33" />
        <mark key="[" line="36" column="47" />
        <mark key="]" line="36" column="47" />
        <mark key="." line="36" column="53" />
        <mark key="^" line="43" column="31" />
      </file>
      <file name="$USER_HOME$/src/command-line-interfaces/cli-cbt/commands/auth/get_user_for_email.js" timestamp="1512755480837">
        <mark key="'" line="213" column="13" />
        <mark key="[" line="224" column="57" />
        <mark key="]" line="15" column="0" />
        <mark key="." line="15" column="0" />
        <mark key="^" line="93" column="26" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/tokens/token_manager.js" timestamp="1526063255366">
        <mark key="[" line="2" column="44" />
        <mark key="]" line="2" column="57" />
        <mark key="." line="2" column="57" />
        <mark key="^" line="2" column="57" />
      </file>
      <file name="$USER_HOME$/src/projects/tic-tac-toe/src/BoardComponent.js" timestamp="1512183517971">
        <mark key="'" line="37" column="1" />
        <mark key="[" line="2" column="7" />
        <mark key="]" line="2" column="14" />
        <mark key="^" line="2" column="14" />
        <mark key="." line="2" column="14" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/components/common/CardSection.js" timestamp="1527371496718">
        <mark key="[" line="21" column="23" />
        <mark key="]" line="21" column="23" />
        <mark key="^" line="21" column="23" />
        <mark key="." line="21" column="23" />
      </file>
      <file name="$USER_HOME$/src/services/service-leaderboard/node/test/api/base.js" timestamp="1507852283295">
        <mark key="[" line="40" column="24" />
        <mark key="]" line="40" column="29" />
        <mark key="." line="40" column="29" />
        <mark key="^" line="40" column="29" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/test/collection_test.js" timestamp="1531946537566">
        <mark key="'" line="94" column="16" />
        <mark key="[" line="106" column="10" />
        <mark key="]" line="106" column="14" />
        <mark key="^" line="106" column="14" />
        <mark key="." line="106" column="14" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/components/LibraryList.js" timestamp="1527370455415">
        <mark key="'" line="19" column="19" />
        <mark key="[" line="27" column="45" />
        <mark key="]" line="27" column="45" />
        <mark key="." line="27" column="45" />
        <mark key="^" line="11" column="62" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/local.js" timestamp="1510857105599">
        <mark key="[" line="23" column="0" />
        <mark key="]" line="24" column="61" />
        <mark key="^" line="2" column="7" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/README.md" timestamp="1525733542497">
        <mark key="[" line="106" column="48" />
        <mark key="]" line="129" column="16" />
        <mark key="^" line="114" column="72" />
        <mark key="." line="129" column="16" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/node/package.json" timestamp="1522704094940">
        <mark key="[" line="19" column="0" />
        <mark key="]" line="19" column="0" />
        <mark key="." line="19" column="0" />
        <mark key="^" line="1" column="50" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/node_modules/eslint-config-cbtnuggets/rules/node-strict.js" timestamp="1511286059466">
        <mark key="[" line="38" column="31" />
        <mark key="]" line="38" column="32" />
        <mark key="." line="38" column="32" />
        <mark key="^" line="37" column="21" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/lib/firehose.js" timestamp="1524768523021">
        <mark key="'" line="5" column="5" />
        <mark key="[" line="63" column="5" />
        <mark key="]" line="63" column="5" />
        <mark key="^" line="63" column="5" />
        <mark key="." line="63" column="5" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lost_but_not_forgotten/test.js" timestamp="1511302203963">
        <mark key="'" line="34" column="4" />
        <mark key="[" line="69" column="0" />
        <mark key="]" line="73" column="0" />
        <mark key="." line="7" column="1" />
        <mark key="^" line="7" column="1" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/config/prod.js" timestamp="1523989051704">
        <mark key="'" line="7" column="34" />
        <mark key="[" line="11" column="31" />
        <mark key="]" line="11" column="31" />
        <mark key="^" line="11" column="31" />
        <mark key="." line="11" column="31" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/fixtures/index.js" timestamp="1515441025305">
        <mark key="'" line="139" column="40" />
        <mark key="[" line="153" column="34" />
        <mark key="]" line="153" column="34" />
        <mark key="^" line="139" column="40" />
        <mark key="." line="153" column="40" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/response.js" timestamp="1511291393796">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="4" column="7" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/vqs_videosGet.js" timestamp="1518758799370">
        <mark key="'" line="40" column="1" />
        <mark key="[" line="0" column="16" />
        <mark key="]" line="1" column="3" />
        <mark key="^" line="1" column="3" />
        <mark key="." line="1" column="3" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/test/api/session_test.js" timestamp="1521239269591">
        <mark key="'" line="169" column="47" />
        <mark key="[" line="8" column="47" />
        <mark key="]" line="8" column="46" />
        <mark key="." line="8" column="46" />
        <mark key="^" line="8" column="46" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/local.json" timestamp="1524257714017">
        <mark key="[" line="32" column="18" />
        <mark key="]" line="32" column="34" />
        <mark key="^" line="32" column="34" />
        <mark key="." line="32" column="34" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/bin/keys.js" timestamp="1522182377387">
        <mark key="[" line="0" column="24" />
        <mark key="]" line="0" column="24" />
        <mark key="." line="0" column="24" />
        <mark key="^" line="0" column="5" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/node/.eslintrc" timestamp="1525980011025">
        <mark key="[" line="10" column="21" />
        <mark key="]" line="10" column="21" />
        <mark key="." line="10" column="21" />
        <mark key="^" line="10" column="21" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/app_test.js" timestamp="1525466221412">
        <mark key="[" line="20" column="31" />
        <mark key="]" line="20" column="31" />
        <mark key="." line="20" column="31" />
        <mark key="^" line="20" column="20" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/lib/dynamodb_token.js" timestamp="1526063102348">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="117" column="17" />
        <mark key="]" line="104" column="37" />
        <mark key="^" line="104" column="37" />
        <mark key="." line="104" column="37" />
      </file>
      <file name="$USER_HOME$/src/workers/worker-leaderboard-reducer/node/lib/connections.js" timestamp="1516925340159">
        <mark key="[" line="64" column="79" />
        <mark key="]" line="65" column="42" />
        <mark key="." line="65" column="42" />
        <mark key="^" line="65" column="42" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/users/user_migrations.js" timestamp="1513101676136">
        <mark key="[" line="87" column="6" />
        <mark key="]" line="87" column="10" />
        <mark key="^" line="87" column="10" />
        <mark key="." line="87" column="10" />
      </file>
      <file name="$USER_HOME$/src/services/service-feature-flag/node/test/common.js" timestamp="1507930879970">
        <mark key="[" line="109" column="0" />
        <mark key="]" line="109" column="0" />
        <mark key="." line="109" column="0" />
        <mark key="^" line="108" column="4" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/authentication/client_auth.js" timestamp="1525119685108">
        <mark key="'" line="87" column="69" />
        <mark key="[" line="113" column="0" />
        <mark key="]" line="113" column="69" />
        <mark key="." line="113" column="70" />
        <mark key="^" line="87" column="102" />
      </file>
      <file name="$USER_HOME$/src/projects/tic-tac-toe/src/GameComponent.js" timestamp="1512183582529">
        <mark key="[" line="3" column="7" />
        <mark key="]" line="1" column="0" />
        <mark key="^" line="1" column="36" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/member_getCollectionRecent.js" timestamp="1518755782842">
        <mark key="'" line="0" column="15" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="^" line="2" column="5" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/lib/mailer.js" timestamp="1510353243500">
        <mark key="[" line="10" column="12" />
        <mark key="]" line="11" column="13" />
        <mark key="." line="11" column="13" />
        <mark key="^" line="11" column="13" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/schema.json" timestamp="1524768271510">
        <mark key="'" line="51" column="16" />
        <mark key="[" line="54" column="33" />
        <mark key="]" line="54" column="43" />
        <mark key="." line="54" column="43" />
        <mark key="^" line="54" column="43" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/node_modules/require-directory/index.js" timestamp="1524520067147">
        <mark key="[" line="58" column="52" />
        <mark key="]" line="59" column="23" />
        <mark key="^" line="59" column="23" />
        <mark key="." line="59" column="23" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/fixtures/vqs_trainersGet.js" timestamp="1518730412858">
        <mark key="'" line="39" column="31" />
        <mark key="[" line="39" column="38" />
        <mark key="]" line="39" column="39" />
        <mark key="^" line="34" column="32" />
        <mark key="." line="39" column="39" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/__tests__/App.test.js" timestamp="1528929291734">
        <mark key="[" line="6" column="45" />
        <mark key="]" line="6" column="45" />
        <mark key="." line="6" column="45" />
        <mark key="^" line="6" column="45" />
      </file>
      <file name="$USER_HOME$/src/services/service-member/node/test/api/base.js" timestamp="1525990401890">
        <mark key="[" line="132" column="0" />
        <mark key="]" line="132" column="0" />
        <mark key="^" line="132" column="14" />
        <mark key="." line="132" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/qa.js" timestamp="1510855399938">
        <mark key="'" line="120" column="41" />
        <mark key="[" line="107" column="0" />
        <mark key="]" line="107" column="0" />
        <mark key="." line="107" column="0" />
        <mark key="^" line="22" column="11" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/node/lib/timezones/index.js" timestamp="1526019142442">
        <mark key="[" line="4" column="11" />
        <mark key="]" line="4" column="11" />
        <mark key="." line="4" column="11" />
        <mark key="^" line="4" column="9" />
      </file>
      <file name="/fragment.js" timestamp="1531944897075">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/config/qa.js" timestamp="1524002130811">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="124" />
        <mark key="." line="15" column="17" />
        <mark key="^" line="11" column="123" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/routes/api_trainer.js" timestamp="1512604022662">
        <mark key="[" line="72" column="33" />
        <mark key="]" line="72" column="43" />
        <mark key="." line="72" column="43" />
        <mark key="^" line="72" column="43" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/.eslintrc" timestamp="1521221991781">
        <mark key="[" line="9" column="65" />
        <mark key="]" line="9" column="70" />
        <mark key="." line="9" column="70" />
        <mark key="^" line="9" column="70" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/data/v1.1_animals.json" timestamp="1515538708537">
        <mark key="[" line="3" column="19" />
        <mark key="]" line="3" column="19" />
        <mark key="." line="3" column="19" />
        <mark key="^" line="37" column="82" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz-report/node/dev/backfill/backfill_questions.js" timestamp="1505412911956">
        <mark key="[" line="48" column="47" />
        <mark key="]" line="48" column="47" />
        <mark key="^" line="48" column="47" />
        <mark key="." line="48" column="47" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/node/lib/helper.js" timestamp="1526425130815">
        <mark key="'" line="87" column="0" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="49" />
        <mark key="." line="89" column="90" />
        <mark key="^" line="89" column="90" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" timestamp="1531978231115">
        <mark key="'" line="796" column="18" />
        <mark key="[" line="568" column="0" />
        <mark key="]" line="568" column="0" />
        <mark key="." line="568" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/api/schedule_once.js" timestamp="1524769189164">
        <mark key="'" line="32" column="0" />
        <mark key="[" line="24" column="67" />
        <mark key="]" line="24" column="67" />
        <mark key="^" line="24" column="67" />
        <mark key="." line="24" column="67" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz-report/node/.eslintrc" timestamp="1505407369530">
        <mark key="[" line="8" column="5" />
        <mark key="]" line="8" column="5" />
        <mark key="." line="8" column="5" />
        <mark key="^" line="8" column="28" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/models/token.js" timestamp="1515804435920">
        <mark key="[" line="8" column="10" />
        <mark key="]" line="8" column="13" />
        <mark key="." line="8" column="13" />
        <mark key="^" line="8" column="13" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/schema.json" timestamp="1526056125315">
        <mark key="'" line="18" column="13" />
        <mark key="[" line="353" column="9" />
        <mark key="]" line="353" column="9" />
        <mark key="." line="353" column="9" />
        <mark key="^" line="353" column="9" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/__tests__/App.test.js" timestamp="1527183706332">
        <mark key="[" line="1" column="17" />
        <mark key="]" line="1" column="17" />
        <mark key="^" line="1" column="17" />
        <mark key="." line="1" column="17" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/.eslintrc" timestamp="1527186874430">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/reducers/LibraryReducer.js" timestamp="1527187112630">
        <mark key="[" line="2" column="21" />
        <mark key="]" line="2" column="24" />
        <mark key="." line="2" column="24" />
        <mark key="^" line="2" column="24" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/react-native-music/components/SoundButton.js" timestamp="1515448608017">
        <mark key="[" line="6" column="76" />
        <mark key="]" line="6" column="76" />
        <mark key="." line="6" column="76" />
        <mark key="^" line="6" column="76" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/prod.json" timestamp="1524768186581">
        <mark key="[" line="31" column="27" />
        <mark key="]" line="31" column="30" />
        <mark key="^" line="31" column="30" />
        <mark key="." line="31" column="30" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/routes/api.js" timestamp="1517605747404">
        <mark key="'" line="296" column="68" />
        <mark key="[" line="36" column="27" />
        <mark key="]" line="36" column="32" />
        <mark key="." line="36" column="32" />
        <mark key="^" line="36" column="32" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/routes/api_payment.js" timestamp="1512603999211">
        <mark key="'" line="20" column="17" />
        <mark key="[" line="29" column="24" />
        <mark key="]" line="29" column="44" />
        <mark key="." line="29" column="44" />
        <mark key="^" line="29" column="44" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/build/start_task.sh" timestamp="1522699008028">
        <mark key="[" line="26" column="121" />
        <mark key="]" line="26" column="122" />
        <mark key="." line="26" column="122" />
        <mark key="^" line="26" column="129" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" timestamp="1531981134097">
        <mark key="'" line="146" column="16" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/react-native-music/react-native-music/components/button.js" timestamp="1515198911104">
        <mark key="[" line="1" column="33" />
        <mark key="]" line="0" column="23" />
        <mark key="^" line="0" column="23" />
        <mark key="." line="0" column="23" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/lib/todoProcess.js" timestamp="1524848993321">
        <mark key="'" line="359" column="0" />
        <mark key="[" line="271" column="0" />
        <mark key="]" line="271" column="0" />
        <mark key="." line="271" column="0" />
        <mark key="^" line="316" column="43" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/config/firebase_keys.json" timestamp="1527751477227">
        <mark key="[" line="7" column="1" />
        <mark key="]" line="7" column="19" />
        <mark key="^" line="7" column="19" />
        <mark key="." line="7" column="19" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/config/firebase.json" timestamp="1527750854464">
        <mark key="'" line="4" column="17" />
        <mark key="[" line="4" column="31" />
        <mark key="]" line="4" column="32" />
        <mark key="." line="4" column="32" />
        <mark key="^" line="6" column="22" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/reducers/LibraryList.json" timestamp="1527187054724">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="46" column="1" />
        <mark key="]" line="46" column="1" />
        <mark key="." line="46" column="1" />
        <mark key="^" line="46" column="1" />
      </file>
      <file name="$USER_HOME$/src/libs/lib-app-core-nodejs/test/keys_test.js" timestamp="1530632899560">
        <mark key="[" line="35" column="0" />
        <mark key="]" line="35" column="0" />
        <mark key="." line="35" column="0" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/app.json" timestamp="1531628069321">
        <mark key="[" line="10" column="26" />
        <mark key="]" line="11" column="31" />
        <mark key="^" line="11" column="31" />
        <mark key="." line="11" column="31" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/models/mongodb/schedule.js" timestamp="1524778323462">
        <mark key="[" line="100" column="31" />
        <mark key="]" line="100" column="31" />
        <mark key="^" line="231" column="29" />
        <mark key="." line="100" column="31" />
      </file>
      <file name="$USER_HOME$/src/services/service-app-gateway/node/routes/api_tag.js" timestamp="1512604011500">
        <mark key="[" line="76" column="33" />
        <mark key="]" line="76" column="39" />
        <mark key="^" line="76" column="39" />
        <mark key="." line="76" column="39" />
      </file>
      <file name="$USER_HOME$/src/services/service-member/node/lib/auth_middleware.js" timestamp="1525991124475">
        <mark key="[" line="22" column="24" />
        <mark key="]" line="22" column="24" />
        <mark key="." line="22" column="24" />
        <mark key="^" line="22" column="24" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/config/keys.json" timestamp="1531865382170">
        <mark key="[" line="29" column="0" />
        <mark key="]" line="30" column="31" />
        <mark key="." line="29" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-site-gateway/node/routes/api_notification.js" timestamp="1524160384505">
        <mark key="'" line="1" column="6" />
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
        <mark key="^" line="14" column="42" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/3lambda_test.js" timestamp="1515188959430">
        <mark key="[" line="9" column="26" />
        <mark key="]" line="9" column="27" />
        <mark key="^" line="9" column="27" />
        <mark key="." line="9" column="27" />
      </file>
      <file name="$USER_HOME$/src/projects/tech-stack/src/components/ListItem.js" timestamp="1527712454574">
        <mark key="'" line="22" column="47" />
        <mark key="[" line="5" column="20" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="6" column="0" />
        <mark key="^" line="6" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/qa.json" timestamp="1525503019538">
        <mark key="[" line="31" column="27" />
        <mark key="]" line="31" column="28" />
        <mark key="^" line="31" column="28" />
        <mark key="." line="31" column="28" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-notification-schedule-migration/deploy.sh" timestamp="1525995318308">
        <mark key="[" line="53" column="1" />
        <mark key="]" line="53" column="0" />
        <mark key="^" line="53" column="0" />
        <mark key="." line="53" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/.eslintrc" timestamp="1519149969902">
        <mark key="[" line="4" column="4" />
        <mark key="]" line="5" column="7" />
        <mark key="^" line="5" column="7" />
        <mark key="." line="5" column="7" />
      </file>
      <file name="$USER_HOME$/src/services/service-quiz/node/test/api/question_test.js" timestamp="1513966220993">
        <mark key="'" line="1851" column="20" />
        <mark key="[" line="1838" column="16" />
        <mark key="]" line="1838" column="20" />
        <mark key="." line="1838" column="20" />
        <mark key="^" line="1838" column="20" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/test/api/internal_process.js" timestamp="1518478095595">
        <mark key="'" line="51" column="12" />
        <mark key="[" line="22" column="0" />
        <mark key="]" line="22" column="0" />
        <mark key="." line="22" column="0" />
        <mark key="^" line="22" column="71" />
      </file>
      <file name="$USER_HOME$/src/services/service-payment/node/dev/wells-fargo/app.js" timestamp="1532029906416">
        <mark key="[" line="3" column="27" />
        <mark key="]" line="4" column="3" />
        <mark key="." line="4" column="3" />
        <mark key="^" line="4" column="3" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/src/components/common/index.js" timestamp="1530250352719">
        <mark key="[" line="5" column="26" />
        <mark key="]" line="6" column="26" />
        <mark key="^" line="6" column="26" />
        <mark key="." line="6" column="26" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" timestamp="1531934767965">
        <mark key="'" line="119" column="8" />
        <mark key="[" line="102" column="53" />
        <mark key="]" line="102" column="70" />
        <mark key="^" line="102" column="70" />
        <mark key="." line="102" column="70" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/models/mongodb/todo.js" timestamp="1525467511770">
        <mark key="[" line="72" column="47" />
        <mark key="]" line="72" column="46" />
        <mark key="^" line="72" column="46" />
        <mark key="." line="72" column="46" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/mocks/aws_mock.js" timestamp="1515705145107">
        <mark key="'" line="30" column="27" />
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="0" />
        <mark key="." line="23" column="0" />
        <mark key="^" line="3" column="6" />
      </file>
      <file name="$USER_HOME$/src/static/static-dashboard/src/apps/milton/views/Projects/index.js" timestamp="1525803345696">
        <mark key="[" line="144" column="1" />
        <mark key="]" line="144" column="0" />
        <mark key="^" line="144" column="0" />
        <mark key="." line="144" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/config/qa.json" timestamp="1517514984690">
        <mark key="[" line="10" column="21" />
        <mark key="]" line="10" column="25" />
        <mark key="." line="10" column="25" />
        <mark key="^" line="10" column="25" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/test/api/authentication/token_auth.js" timestamp="1525200908217">
        <mark key="'" line="74" column="24" />
        <mark key="[" line="37" column="6" />
        <mark key="]" line="37" column="6" />
        <mark key="." line="37" column="6" />
        <mark key="^" line="37" column="10" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/lib/todo_factory.js" timestamp="1526549877438">
        <mark key="'" line="21" column="26" />
        <mark key="[" line="49" column="29" />
        <mark key="]" line="49" column="29" />
        <mark key="." line="49" column="29" />
        <mark key="^" line="49" column="30" />
      </file>
      <file name="/JavaScript Console" timestamp="1531947905107">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="18" />
        <mark key="." line="0" column="18" />
        <mark key="^" line="0" column="18" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/requests/src/reducers/index.js" timestamp="1527754144176">
        <mark key="[" line="3" column="32" />
        <mark key="]" line="5" column="0" />
        <mark key="." line="5" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/models/dynamodb/catalog.js" timestamp="1522258656017">
        <mark key="'" line="353" column="0" />
        <mark key="[" line="59" column="0" />
        <mark key="]" line="59" column="0" />
        <mark key="^" line="57" column="27" />
        <mark key="." line="59" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/test.json" timestamp="1525365308713">
        <mark key="'" line="28" column="33" />
        <mark key="[" line="58" column="36" />
        <mark key="]" line="58" column="39" />
        <mark key="." line="58" column="39" />
        <mark key="^" line="58" column="39" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/default.json" timestamp="1524768161740">
        <mark key="[" line="10" column="30" />
        <mark key="]" line="12" column="62" />
        <mark key="." line="12" column="62" />
        <mark key="^" line="12" column="62" />
      </file>
      <file name="$USER_HOME$/src/services/service-promotion/node/config/default.json" timestamp="1517267134219">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="14" column="0" />
        <mark key="." line="12" column="8" />
        <mark key="^" line="12" column="8" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-activeTokens-dynamo-stream-update-redis/test/2lambda_test.js" timestamp="1515188953470">
        <mark key="[" line="9" column="26" />
        <mark key="]" line="9" column="27" />
        <mark key="^" line="9" column="27" />
        <mark key="." line="9" column="27" />
      </file>
      <file name="$USER_HOME$/src/projects/requests-app/score-redux/src/components/common/BannerAd.js" timestamp="1530418581552">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="17" column="32" />
      </file>
      <file name="$USER_HOME$/src/services/service-member/node/routes/api.js" timestamp="1525990882302">
        <mark key="'" line="48" column="33" />
        <mark key="[" line="1068" column="0" />
        <mark key="]" line="1068" column="40" />
        <mark key="^" line="955" column="39" />
        <mark key="." line="1068" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-auth/node/config/default.json" timestamp="1511299470477">
        <mark key="'" line="83" column="20" />
        <mark key="[" line="21" column="25" />
        <mark key="]" line="21" column="29" />
        <mark key="." line="21" column="29" />
        <mark key="^" line="21" column="29" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/config/routes.js" timestamp="1525906681519">
        <mark key="[" line="18" column="0" />
        <mark key="]" line="18" column="0" />
        <mark key="^" line="18" column="46" />
        <mark key="." line="18" column="0" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/bin/update-courses-with-existing-exams.js" timestamp="1522361535180">
        <mark key="'" line="127" column="41" />
        <mark key="[" line="111" column="0" />
        <mark key="]" line="111" column="0" />
        <mark key="." line="111" column="0" />
        <mark key="^" line="163" column="11" />
      </file>
      <file name="$USER_HOME$/src/services/service-exam-provider/node/dev/update_courses_with_existing_exams.js" timestamp="1521651993042">
        <mark key="[" line="6" column="47" />
        <mark key="]" line="7" column="32" />
        <mark key="^" line="7" column="32" />
        <mark key="." line="7" column="32" />
      </file>
      <file name="$USER_HOME$/src/services/service-notification-schedule/node/package.json" timestamp="1524604019144">
        <mark key="[" line="8" column="16" />
        <mark key="]" line="8" column="23" />
        <mark key="^" line="8" column="23" />
        <mark key="." line="8" column="23" />
      </file>
      <file name="$USER_HOME$/src/command-line-interfaces/cli-cbt/commands/auth/get_token.js" timestamp="1512690514894">
        <mark key="'" line="51" column="18" />
        <mark key="[" line="114" column="0" />
        <mark key="]" line="116" column="36" />
        <mark key="." line="9" column="0" />
        <mark key="^" line="51" column="22" />
      </file>
      <file name="$USER_HOME$/src/tasks/task-data-delete-user/node/config/production.js" timestamp="1531869942371">
        <mark key="'" line="16" column="50" />
        <mark key="[" line="23" column="20" />
        <mark key="]" line="23" column="20" />
        <mark key="." line="23" column="20" />
        <mark key="^" line="23" column="12" />
      </file>
      <file name="$USER_HOME$/src/services/service-feature-flag/node/routes/api.js" timestamp="1507929475437">
        <mark key="[" line="69" column="0" />
        <mark key="]" line="69" column="38" />
        <mark key="^" line="68" column="36" />
        <mark key="." line="69" column="0" />
      </file>
      <file name="$USER_HOME$/src/lambdas/lambda-notification-schedule-internalProcessTodos/config/keys.json" timestamp="1523904246617">
        <mark key="[" line="16" column="26" />
        <mark key="]" line="16" column="30" />
        <mark key="." line="16" column="30" />
        <mark key="^" line="16" column="30" />
      </file>
    </filemarks>
    <jumps>
      <jump line="58" column="12" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="88" column="12" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="98" column="24" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="114" column="24" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="118" column="20" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="0" column="0" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="8" column="26" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="10" column="9" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="39" column="16" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="62" column="16" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="87" column="24" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="107" column="12" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="122" column="8" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="123" column="8" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="0" column="0" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="119" column="8" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/member_service/remove_gdpr_user_data.js" />
      <jump line="113" column="20" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="140" column="21" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/auth_service/auth_remove_gdpr_user_data.js" />
      <jump line="49" column="4" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/lib/index" />
      <jump line="15" column="37" filename="$USER_HOME$/src/tasks/task-data-delete-user/node/lib/index" />
      <jump line="12" column="58" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="1" column="0" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="153" column="40" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="141" column="47" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="132" column="46" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="134" column="44" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="139" column="48" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="50" column="6" filename="$USER_HOME$/src/services/service-app-gateway/node/test/collection_test.js" />
      <jump line="94" column="16" filename="$USER_HOME$/src/services/service-app-gateway/node/test/collection_test.js" />
      <jump line="138" column="44" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="135" column="75" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="136" column="88" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="137" column="80" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="125" column="64" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="126" column="76" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="127" column="70" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="128" column="77" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="129" column="77" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="130" column="90" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="640" column="22" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="675" column="49" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="707" column="49" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="946" column="36" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="160" column="36" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="264" column="36" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="548" column="63" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="636" column="35" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="37" column="0" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="42" column="8" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="46" column="8" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="50" column="8" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="55" column="8" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="75" column="16" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="135" column="20" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="139" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="157" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="161" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="181" column="16" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="241" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="261" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="265" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="357" column="16" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="393" column="32" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="408" column="32" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="412" column="20" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="429" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="439" column="26" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="443" column="20" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="444" column="20" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="448" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="450" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="453" column="89" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="525" column="28" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="526" column="80" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="777" column="26" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="881" column="38" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="80" column="28" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="194" column="28" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="301" column="28" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="364" column="36" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="531" column="70" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="534" column="24" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="535" column="30" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="645" column="33" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="795" column="18" filename="$USER_HOME$/src/services/service-site-gateway/node/routes/api_courses.js" />
      <jump line="1537" column="1" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="1541" column="0" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="1542" column="0" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="0" column="17" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="120394" column="1" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="1" column="19" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="151" column="0" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="173" column="47" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="174" column="65" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="181" column="45" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="182" column="57" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="28" column="29" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="34" column="0" filename="$USER_HOME$/src/services/service-app-gateway/node/routes/api_collection.js" />
      <jump line="120389" column="0" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
      <jump line="146" column="16" filename="$USER_HOME$/src/services/service-site-gateway/node/dev/index.js" />
    </jumps>
    <registers>
      <register name="a" type="4">
        <keys>
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="36" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="51" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="87" code="0" mods="0" />
          <key char="83" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="84" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="41" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="41" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="59" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="87" code="0" mods="0" />
          <key char="83" code="0" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="39" code="0" mods="0" />
          <key char="92" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="92" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="36" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="41" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="74" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
        </keys>
      </register>
      <register name="&quot;" type="4">
        <text>args</text>
      </register>
      <register name="-" type="4">
        <text>args</text>
      </register>
      <register name="/" type="4">
        <text>cache</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIGNvbnN0IGFjdGl2ZUlkcyA9IGRhdGEuZmlsdGVyKGQgPT4gXy5pc09iamVjdChkLmV4YW1zWzBdKSAmJiBkLnN0YXRlID09PSAnUmVsZWFzZScpOwo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">aW1wb3J0IGxvZGFzaCBmcm9tICdsb2Rhc2gnOwo=</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAiZGF0YSI6IFsK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIF0sCg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgICAgY29uc3QgcmVtb3ZlRXhhbXMgPSBbXTsK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHJlbW92ZUV4YW1zRGljdCA9IF8ua2V5QnkocmVtb3ZlRXhhbXMsIGRldGFpbCA9PiBkZXRhaWwpOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfQo=</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGRlbGV0ZSBjb3Vyc2VPYmplY3QuZXhhbXM7Cg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKF8uaGFzKHJlbW92ZUV4YW1zRGljdCwgZXhhbUlkKSkgewo=</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>cache</last-search>
      <last-offset />
      <last-pattern>cache</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>cosnole</entry>
        <entry>console.</entry>
        <entry>courses\/with\/exams</entry>
        <entry>fixture</entry>
        <entry>lastname</entry>
        <entry>'</entry>
        <entry>GDPR</entry>
        <entry>logger</entry>
        <entry>console</entry>
        <entry>'active</entry>
        <entry>exam</entry>
        <entry>it</entry>
        <entry>item</entry>
        <entry>exam_id</entry>
        <entry>i</entry>
        <entry>===</entry>
        <entry>return</entry>
        <entry>_</entry>
        <entry>filter</entry>
        <entry>cache</entry>
      </history-search>
      <history-cmd>
        <entry>182</entry>
        <entry>132</entry>
        <entry>19</entry>
        <entry>140</entry>
        <entry>63</entry>
        <entry>114</entry>
        <entry>119</entry>
        <entry>75</entry>
        <entry>sp</entry>
        <entry>cs</entry>
        <entry>274</entry>
        <entry>vsp</entry>
        <entry>q</entry>
        <entry>wq</entry>
        <entry>50</entry>
        <entry>v</entry>
        <entry encoding="base64">JzwsJz53</entry>
        <entry>s</entry>
        <entry>vs</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>pressed F3</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>